openapi: 3.0.3
info:
  title: Passu Backend API
  description: |
    Passu 인증 시스템 백엔드 API
    
    이 API는 학생 이벤트 등록 및 관리 시스템을 제공합니다.
    - 학생 인증 (SSUPORT 연동)
    - 이벤트 정보 조회
    - 랜덤 키 발급
    - 등록 상태 확인
    
  version: 1.0.0
  contact:
    name: Passu Team
    email: passu@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://83ohh4338b.execute-api.ap-northeast-2.amazonaws.com/dev
    description: API Gateway (CORS enabled)
  - url: https://dev.passu.sssupport.shop
    description: CloudFront (may have CORS issues)
  - url: http://localhost:3000
    description: Local development server (serverless offline)

security:
  - BearerAuth: []

paths:
  /user-api/health:
    get:
      tags:
        - Health
      summary: 서비스 상태 확인
      description: API 서버의 상태를 확인합니다.
      security: []
      responses:
        '200':
          description: 서비스가 정상적으로 동작 중
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  service:
                    type: string
                    example: "passu-backend"
                  message:
                    type: string
                    example: "Service is up and running"

  /user-api/student-info:
    get:
      tags:
        - Student
      summary: 학생 정보 조회
      description: JWT 토큰을 통해 현재 로그인한 학생의 정보를 조회합니다.
      responses:
        '200':
          description: 학생 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInfoResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 내부 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-api/events/{eventId}:
    get:
      tags:
        - Events
      summary: 이벤트 정보 조회
      description: 특정 이벤트의 상세 정보를 조회합니다.
      parameters:
        - name: eventId
          in: path
          required: true
          description: 이벤트 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 이벤트 정보 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInfoResponse'
        '400':
          description: 잘못된 요청 (eventId 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 이벤트를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 내부 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-api/events/{eventId}/count:
    get:
      tags:
        - Events
      summary: 이벤트 등록자 수 조회
      description: 특정 이벤트에 등록된 학생 수를 조회합니다.
      parameters:
        - name: eventId
          in: path
          required: true
          description: 이벤트 ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: 등록자 수 조회 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCountResponse'
        '400':
          description: 잘못된 요청 (eventId 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 이벤트를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 내부 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-api/events/{eventId}/issue-random-key:
    post:
      tags:
        - Events
      summary: 랜덤 키 발급
      description: |
        학생이 이벤트에 참여하기 위한 랜덤 키를 발급받습니다.
        
        **발급 조건:**
        - 학생회 계정은 참여 불가
        - 이벤트 요구사항 충족 (학과, 학생회비 등)
        - 이벤트 정원 내
        - 15분간 유효
      parameters:
        - name: eventId
          in: path
          required: true
          description: 이벤트 ID
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
                  description: SSUPORT에서 발급받은 JWT 토큰
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '201':
          description: 랜덤 키 발급 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RandomKeyResponse'
        '400':
          description: 잘못된 요청 (토큰 또는 eventId 누락)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: 인증 실패
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: 참여 불가 (자격 미달, 매진 등)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: 이벤트를 찾을 수 없음
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: 요청 한도 초과
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 내부 서버 오류
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: SSUPORT에서 발급받은 JWT 토큰

  schemas:
    Student:
      type: object
      properties:
        studentId:
          type: string
          description: 학생 ID
          example: "2020123456"
        name:
          type: string
          description: 학생 이름
          example: "홍길동"
        status:
          type: integer
          description: 학생 상태 (비트 플래그)
          example: 1
        isPaidUnionFee:
          type: boolean
          description: 학생회비 납부 여부
          example: true
        isCouncil:
          type: boolean
          description: 학생회 여부
          example: false
        majorCode:
          type: integer
          description: 학과 코드
          example: 101

    Event:
      type: object
      properties:
        id:
          type: integer
          description: 이벤트 ID
          example: 1
        name:
          type: string
          description: 이벤트명
          example: "여름 축제"
        description:
          type: string
          description: 이벤트 설명
          example: "2025 여름 축제입니다"
        product_name:
          type: string
          description: 상품명
          example: "축제 티켓"
        product_quantity:
          type: integer
          description: 상품 수량 (정원)
          example: 1000
        location:
          type: string
          description: 장소
          example: "대강당"
        require_status:
          type: integer
          description: 요구되는 학생 상태
          example: 0
        require_union_fee:
          type: boolean
          description: 학생회비 납부 요구 여부
          example: true
        allowed_departments:
          type: array
          items:
            type: integer
          description: 참여 가능한 학과 코드 목록
          example: [101, 102, 56]
        status:
          type: string
          enum: [BEFORE, ONGOING, PAUSE, FINISHED]
          description: 이벤트 상태
          example: "ONGOING"
        start_time:
          type: string
          format: date-time
          description: 시작 시간
          example: "2024-01-15 10:00:00"
        end_time:
          type: string
          format: date-time
          description: 종료 시간
          example: "2024-01-22 18:00:00"
        created_at:
          type: string
          format: date-time
          description: 생성 시간
          example: "2024-01-01 00:00:00"
        updated_at:
          type: string
          format: date-time
          description: 수정 시간
          example: "2024-01-01 00:00:00"

    StudentInfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Student information retrieved successfully"
        data:
          $ref: '#/components/schemas/Student'

    EventInfoResponse:
      type: object
      properties:
        message:
          type: string
          example: "Event retrieved successfully"
        data:
          $ref: '#/components/schemas/Event'

    ProductCountResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product count retrieved successfully"
        data:
          type: object
          properties:
            enrolled_count:
              type: integer
              description: 등록된 학생 수
              example: 150

    RandomKeyResponse:
      type: object
      properties:
        message:
          type: string
          example: "Random key issued successfully"
        data:
          type: object
          properties:
            random_key:
              type: string
              description: 발급된 랜덤 키
              example: "1234"
            expire_time:
              type: integer
              description: 만료 시간 (초)
              example: 900
            event_id:
              type: integer
              description: 이벤트 ID
              example: 1

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: 오류 메시지
          example: "Invalid token or failed to retrieve user information"

tags:
  - name: Health
    description: 서비스 상태 확인
  - name: Student
    description: 학생 정보 관리
  - name: Events
    description: 이벤트 관리
